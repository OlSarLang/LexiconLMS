@model LexiconLMS.Core.ViewModels.CourseViewModel

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Course</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Course.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Course.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Course.StartDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Course.StartDate)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Course.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Course.Description)
        </dd>
    </dl>
    <h4>
        @Html.DisplayNameFor(model => model.Course.Modules)
    </h4>
    <div style="height: 55vh; overflow:auto;">
        @await Html.PartialAsync("_ModulesPartial", Model.Modules)
    </div>
</div>
@if (Model.Documents.Count > 0)
{
    <div>
        @foreach (var documentCourse in Model.Documents)
            {
        <span>@documentCourse.Document.Name</span>
        <a asp-action="DownloadDocument" asp-controller="Document" asp-route-documentId="@documentCourse.DocumentId">Download</a>  <text>|</text>
        <a asp-controller="Document" asp-action="RemoveDocument" asp-route-documentId="@documentCourse.DocumentId" asp-route-entityId="@documentCourse.CourseId">Remove</a><br />
            }
    </div>
}
@if (User.IsInRole("Teacher"))
{
<div>

    @await Component.InvokeAsync("DocumentUpload", new { entityId =Model.Course.Id.ToString(), user = User, entityType = "Course" })
</div>
}
<div>
    <a asp-action="Edit" asp-route-id="@Model.Course.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
